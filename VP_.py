import streamlit as st
import pandas as pd
import requests
from io import BytesIO

# === –°–°–´–õ–ö–ê –ù–ê CSV ===
FILE_URL = "https://raw.githubusercontent.com/N-sam-sn/OP/main/Result.csv"

@st.cache_data
def load_data():
    response = requests.get(FILE_URL)
    response.raise_for_status()
    df = pd.read_csv(BytesIO(response.content), encoding="utf-8-sig", sep=";")
    df.columns = df.columns.str.replace('\ufeff', '').str.strip()

    def clean_number(x):
        if pd.isna(x):
            return None
        return str(x).replace(" ", "").replace(",", ".").replace("‚Äì", "0").strip()

    for col in ["–û–ü", "–û–ü –ü–ª–∞–Ω", "–í–ü", "–í–ü –ü–ª–∞–Ω", "–û–ü_–ü–ì"]:
        if col in df.columns:
            df[col] = df[col].apply(clean_number)
            df[col] = pd.to_numeric(df[col], errors="coerce")

    df = df[
        (df["–û–ü"] > 0) |
        (df["–û–ü –ü–ª–∞–Ω"] > 0) |
        (df["–í–ü"] > 0) |
        (df["–í–ü –ü–ª–∞–Ω"] > 0)
    ].copy()

    df["% –û–ü"] = df.apply(lambda row: row["–û–ü"] / row["–û–ü –ü–ª–∞–Ω"] if row["–û–ü –ü–ª–∞–Ω"] != 0 else None, axis=1)
    df["% –í–ü"] = df.apply(lambda row: row["–í–ü"] / row["–í–ü –ü–ª–∞–Ω"] if row["–í–ü –ü–ª–∞–Ω"] != 0 else None, axis=1)

    return df

# === CSS ===
st.markdown("""
    <style>
        .main, .block-container {
            max-width: 2000px !important;
            padding-left: 2rem;
            padding-right: 2rem;
        }
        .dataframe th, .dataframe td {
            white-space: nowrap;
            text-align: center;
        }
        .scrollable-table-container {
            max-height: 80vh;
            overflow-y: auto;
            overflow-x: auto;
            border: 1px solid #ddd;
        }
        .scrollable-table-container table thead th {
            position: sticky;
            top: 0;
            background-color: #f1f1f1;
            z-index: 1;
        }
    </style>
""", unsafe_allow_html=True)

# === –ó–ê–ì–û–õ–û–í–û–ö ===

#saved_emoji = pygame.image.load("https://github.com/N-sam-sn/OP/blob/main/B01r.png")
#screen.blit(saved_emoji, (100, 100))
st.title("üìä –î–∞—à–±–æ—Ä–¥ –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º")

# === –ó–ê–ì–†–£–ó–ö–ê –î–ê–ù–ù–´–• ===
df = load_data()

# === –§–ò–õ–¨–¢–†–´ ===
st.sidebar.header("üîé –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è")

def multiselect_with_all(label, options):
    all_label = "–í—Å–µ"
    selected = st.sidebar.multiselect(label, [all_label] + options, default=all_label)
    return options if all_label in selected else selected

filtered_df = df.copy()

if "–†–µ–≥–∏–æ–Ω" in filtered_df.columns:
    regions = sorted(filtered_df["–†–µ–≥–∏–æ–Ω"].dropna().unique())
    region_selection = multiselect_with_all("–†–µ–≥–∏–æ–Ω", regions)
    filtered_df = filtered_df[filtered_df["–†–µ–≥–∏–æ–Ω"].isin(region_selection)]

if "–ú–µ–Ω–µ–¥–∂–µ—Ä" in filtered_df.columns:
    managers = sorted(filtered_df["–ú–µ–Ω–µ–¥–∂–µ—Ä"].dropna().unique())
    manager_selection = multiselect_with_all("–ú–µ–Ω–µ–¥–∂–µ—Ä", managers)
    filtered_df = filtered_df[filtered_df["–ú–µ–Ω–µ–¥–∂–µ—Ä"].isin(manager_selection)]

if "–î–æ–±–∞–≤–∏—Ç—å –≤ –ø–ª–∞–Ω" in filtered_df.columns:
    plans = sorted(filtered_df["–î–æ–±–∞–≤–∏—Ç—å –≤ –ø–ª–∞–Ω"].dropna().unique())
    plan_selection = multiselect_with_all("–î–æ–±–∞–≤–∏—Ç—å –≤ –ø–ª–∞–Ω", plans)
    filtered_df = filtered_df[filtered_df["–î–æ–±–∞–≤–∏—Ç—å –≤ –ø–ª–∞–Ω"].isin(plan_selection)]

if "–ü–æ–∫—É–ø–∞—Ç–µ–ª—å" in filtered_df.columns:
    buyers = sorted(filtered_df["–ü–æ–∫—É–ø–∞—Ç–µ–ª—å"].dropna().unique())
    buyer_selection = multiselect_with_all("–ü–æ–∫—É–ø–∞—Ç–µ–ª—å", buyers)
    filtered_df = filtered_df[filtered_df["–ü–æ–∫—É–ø–∞—Ç–µ–ª—å"].isin(buyer_selection)]

# === –ü–û–î–°–í–ï–¢–ö–ê –ü–†–û–¶–ï–ù–¢–û–í ===
def highlight_percent_cols(df):
    styles = pd.DataFrame("", index=df.index, columns=df.columns)
    for col in ["% –û–ü", "% –í–ü"]:
        if col in df.columns:
            styles[col] = df[col].apply(
                lambda v: "background-color: lightgreen" if v > 1
                else "background-color: lightcoral" if v < 1
                else ""
            )
    return styles

# === –¢–ê–ë–õ–ò–¶–ê ===
if not filtered_df.empty:
    display_columns = ["–ú–µ–Ω–µ–¥–∂–µ—Ä", "–ü–æ–∫—É–ø–∞—Ç–µ–ª—å", "–ö–æ–¥", "–û–ü", "–û–ü –ü–ª–∞–Ω", "% –û–ü", "–í–ü", "–í–ü –ü–ª–∞–Ω", "% –í–ü", "–û–ü_–ü–ì"]
    df_result = filtered_df[display_columns].copy()
    df_result.rename(columns={"–û–ü": "–û–ü –§–∞–∫—Ç", "–í–ü": "–í–ü –§–∞–∫—Ç"}, inplace=True)

    # –ü–æ–¥—Å—á—ë—Ç –∏—Ç–æ–≥–æ–≤
    total_op = df_result["–û–ü –§–∞–∫—Ç"].sum()
    total_op_plan = df_result["–û–ü –ü–ª–∞–Ω"].sum()
    total_vp = df_result["–í–ü –§–∞–∫—Ç"].sum()
    total_vp_plan = df_result["–í–ü –ü–ª–∞–Ω"].sum()
    total_pg = df_result["–û–ü_–ü–ì"].sum()

    percent_op_total = total_op / total_op_plan if total_op_plan else None
    percent_vp_total = total_vp / total_vp_plan if total_vp_plan else None

    totals = {
        "–ú–µ–Ω–µ–¥–∂–µ—Ä": "–ò–¢–û–ì–û",
        "–ü–æ–∫—É–ø–∞—Ç–µ–ª—å": "",
        "–ö–æ–¥": "",
        "–û–ü –§–∞–∫—Ç": total_op,
        "–û–ü –ü–ª–∞–Ω": total_op_plan,
        "% –û–ü": percent_op_total,
        "–í–ü –§–∞–∫—Ç": total_vp,
        "–í–ü –ü–ª–∞–Ω": total_vp_plan,
        "% –í–ü": percent_vp_total,
        "–û–ü_–ü–ì": total_pg
    }

    df_result = pd.concat([df_result, pd.DataFrame([totals])], ignore_index=True)

    # === –ó–ê–ì–û–õ–û–í–û–ö –° –ò–¢–û–ì–ê–ú–ò –í –°–¢–†–û–ö–£ + –ó–ê–õ–ò–í–ö–ê ===
    color_op = "lightgreen" if percent_op_total >= 1 else "lightcoral"
    color_vp = "lightgreen" if percent_vp_total >= 1 else "lightcoral"

    summary_html = f"""
        <div style="font-weight:bold; margin-top:1em;">
            –ò—Ç–æ–≥–∏: &nbsp;
            –û–ü –§–∞–∫—Ç: {total_op:,.2f} &nbsp; | &nbsp;
            –û–ü –ü–ª–∞–Ω: {total_op_plan:,.2f} &nbsp; | &nbsp;
            <span style="background-color:{color_op}; padding: 2px 6px; border-radius: 4px;">
                % –û–ü: {percent_op_total:.0%}
            </span> &nbsp; | &nbsp;
            –í–ü –§–∞–∫—Ç: {total_vp:,.2f} &nbsp; | &nbsp;
            –í–ü –ü–ª–∞–Ω: {total_vp_plan:,.2f} &nbsp; | &nbsp;
            <span style="background-color:{color_vp}; padding: 2px 6px; border-radius: 4px;">
                % –í–ü: {percent_vp_total:.0%}
            </span> &nbsp; | &nbsp;
            –û–ü_–ü–ì: {total_pg:,.2f}
        </div>
    """

    st.subheader("üìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã")
    st.markdown(summary_html, unsafe_allow_html=True)

    styled_html = df_result.style \
        .format({
            "–û–ü –§–∞–∫—Ç": "{:,.2f}",
            "–û–ü –ü–ª–∞–Ω": "{:,.2f}",
            "% –û–ü": "{:.0%}",
            "–í–ü –§–∞–∫—Ç": "{:,.2f}",
            "–í–ü –ü–ª–∞–Ω": "{:,.2f}",
            "% –í–ü": "{:.0%}",
            "–û–ü_–ü–ì": "{:,.2f}"
        }) \
        .apply(highlight_percent_cols, axis=None) \
        .to_html()

    st.markdown(f"""
        <div class="scrollable-table-container">
            {styled_html}
        </div>
    """, unsafe_allow_html=True)
else:
    st.warning("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è ‚Äî –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏.")

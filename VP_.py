import streamlit as st
import pandas as pd
import requests
from io import BytesIO

# === –°–°–´–õ–ö–ê –ù–ê CSV ===
FILE_URL = "https://raw.githubusercontent.com/N-sam-sn/OP/main/Result.csv"

@st.cache_data
def load_data():
    response = requests.get(FILE_URL)
    response.raise_for_status()

    try:
        df = pd.read_csv(BytesIO(response.content), encoding="utf-8-sig", sep=";")
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ CSV: {e}")
        st.stop()

    df.columns = df.columns.str.replace('\ufeff', '').str.strip()

    def clean_number(x):
        if pd.isna(x):
            return None
        return str(x).replace(" ", "").replace(",", ".").replace("‚Äì", "0").strip()

    numeric_cols = ["–û–ü", "–û–ü –ü–ª–∞–Ω", "–í–ü", "–í–ü –ü–ª–∞–Ω"]
    for col in numeric_cols:
        df[col] = df[col].apply(clean_number)
        df[col] = pd.to_numeric(df[col], errors="coerce")

    df = df[
        (df["–û–ü"] > 0) |
        (df["–û–ü –ü–ª–∞–Ω"] > 0) |
        (df["–í–ü"] > 0) |
        (df["–í–ü –ü–ª–∞–Ω"] > 0)
    ].copy()

    df["% –û–ü"] = df.apply(lambda row: row["–û–ü"] / row["–û–ü –ü–ª–∞–Ω"] if row["–û–ü –ü–ª–∞–Ω"] != 0 else None, axis=1)
    df["% –í–ü"] = df.apply(lambda row: row["–í–ü"] / row["–í–ü –ü–ª–∞–Ω"] if row["–í–ü –ü–ª–∞–Ω"] != 0 else None, axis=1)

    return df

df = load_data()

# === –ó–∞–≥–æ–ª–æ–≤–æ–∫ ===
st.title("üìä –î–∞—à–±–æ—Ä–¥ –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º (–ø–æ —à–∏—Ä–∏–Ω–µ —ç–∫—Ä–∞–Ω–∞)")

# –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.markdown("""
    <style>
        .main, .block-container {
            max-width: 2000px !important;
            padding-left: 2rem;
            padding-right: 2rem;
        }
        .dataframe th, .dataframe td {
            white-space: nowrap;
            text-align: center;
        }
    </style>
""", unsafe_allow_html=True)


# === –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è ===
st.sidebar.header("üîé –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è")

def multiselect_with_all(label, options):
    all_label = "–í—Å–µ"
    selected = st.sidebar.multiselect(label, [all_label] + options, default=all_label)
    return options if all_label in selected else selected

filtered_df = df.copy()

if "–†–µ–≥–∏–æ–Ω" in filtered_df.columns:
    regions = sorted(filtered_df["–†–µ–≥–∏–æ–Ω"].dropna().unique())
    region_selection = multiselect_with_all("–†–µ–≥–∏–æ–Ω", regions)
    filtered_df = filtered_df[filtered_df["–†–µ–≥–∏–æ–Ω"].isin(region_selection)]

if "–ú–µ–Ω–µ–¥–∂–µ—Ä" in filtered_df.columns:
    managers = sorted(filtered_df["–ú–µ–Ω–µ–¥–∂–µ—Ä"].dropna().unique())
    manager_selection = multiselect_with_all("–ú–µ–Ω–µ–¥–∂–µ—Ä", managers)
    filtered_df = filtered_df[filtered_df["–ú–µ–Ω–µ–¥–∂–µ—Ä"].isin(manager_selection)]

if "–î–æ–±–∞–≤–∏—Ç—å –≤ –ø–ª–∞–Ω" in filtered_df.columns:
    plans = sorted(filtered_df["–î–æ–±–∞–≤–∏—Ç—å –≤ –ø–ª–∞–Ω"].dropna().unique())
    plan_selection = multiselect_with_all("–î–æ–±–∞–≤–∏—Ç—å –≤ –ø–ª–∞–Ω", plans)
    filtered_df = filtered_df[filtered_df["–î–æ–±–∞–≤–∏—Ç—å –≤ –ø–ª–∞–Ω"].isin(plan_selection)]

if "–ü–æ–∫—É–ø–∞—Ç–µ–ª—å" in filtered_df.columns:
    buyers = sorted(filtered_df["–ü–æ–∫—É–ø–∞—Ç–µ–ª—å"].dropna().unique())
    buyer_selection = multiselect_with_all("–ü–æ–∫—É–ø–∞—Ç–µ–ª—å", buyers)
    filtered_df = filtered_df[filtered_df["–ü–æ–∫—É–ø–∞—Ç–µ–ª—å"].isin(buyer_selection)]

# === –¢–∞–±–ª–∏—Ü–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ ===
st.subheader("üìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã")

display_columns = ["–ú–µ–Ω–µ–¥–∂–µ—Ä", "–ü–æ–∫—É–ø–∞—Ç–µ–ª—å", "–ö–æ–¥", "–û–ü", "–û–ü –ü–ª–∞–Ω", "% –û–ü", "–í–ü", "–í–ü –ü–ª–∞–Ω", "% –í–ü"]
available_cols = [col for col in display_columns if col in filtered_df.columns]
df_result = filtered_df[available_cols].copy()

# === –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞ ===
totals = {
    "–ú–µ–Ω–µ–¥–∂–µ—Ä": "–ò–¢–û–ì–û",
    "–ü–æ–∫—É–ø–∞—Ç–µ–ª—å": "",
    "–ö–æ–¥": "",
    "–û–ü": df_result["–û–ü"].sum(),
    "–û–ü –ü–ª–∞–Ω": df_result["–û–ü –ü–ª–∞–Ω"].sum(),
    "% –û–ü": df_result["–û–ü"].sum() / df_result["–û–ü –ü–ª–∞–Ω"].sum() if df_result["–û–ü –ü–ª–∞–Ω"].sum() != 0 else None,
    "–í–ü": df_result["–í–ü"].sum(),
    "–í–ü –ü–ª–∞–Ω": df_result["–í–ü –ü–ª–∞–Ω"].sum(),
    "% –í–ü": df_result["–í–ü"].sum() / df_result["–í–ü –ü–ª–∞–Ω"].sum() if df_result["–í–ü –ü–ª–∞–Ω"].sum() != 0 else None,
}
df_result = pd.concat([df_result, pd.DataFrame([totals])], ignore_index=True)

# === –ü–æ–¥—Å–≤–µ—Ç–∫–∞ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ ===
def highlight_percent(val):
    if pd.isna(val):
        return ""
    return "background-color: lightgreen" if val > 1 else "background-color: lightcoral" if val < 1 else ""

# === –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º ===
styled_df = df_result.style \
    .format({
        "–û–ü": "{:,.2f}",
        "–û–ü –ü–ª–∞–Ω": "{:,.2f}",
        "% –û–ü": "{:.0%}",
        "–í–ü": "{:,.2f}",
        "–í–ü –ü–ª–∞–Ω": "{:,.2f}",
        "% –í–ü": "{:.0%}"
    }) \
    .applymap(highlight_percent, subset=["% –û–ü", "% –í–ü"])

st.dataframe(styled_df, use_container_width=True)
